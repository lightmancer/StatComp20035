devtools::build_vignettes()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
.Last.error.trace
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (j in 1:n)
{
.  for(i in 1:5)
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (j in 1:n)
{
.  for(j in 1:5)
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (j in 1:n)
{
.  for(i in 1:5)
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (i in 1:n)
{
.  for(j in 1:5)
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (i in 1:n)
{
.  for(j in 1:5)
data(scor,package="bootstrap")
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
i <- 0
j <- 0
for (i in 1:n)
{
.  for(j in 1:5)
data(scor,package="bootstrap")
#scor itself contains a matirx
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (j in 1:n)
{
for(i in 1:5)
{
lambda.hat[j] <- order(ev$values[-i],decreasing=TRUE)[1]
theta.jack[j] <- lambda.hat[j] / (mean(ev$values)*(4))
}
bias <- (n-1) * (mean(theta.jack) - theta.hat)
se <- sqrt((n-1) *mean((theta.jack - mean(theta.jack))^2))
}
print(c(mean(bias),mean(se)))
data(scor,package="bootstrap")
#scor itself contains a matirx
n <- 1000
theta.hat <- numeric(n)
for(k in 1:n)
{ x1<- sample(scor$mec,size=5,replace=T)
x2<- sample(scor$vec,size=5,replace=T)
x3<- sample(scor$alg,size=5,replace=T)
x4<- sample(scor$ana,size=5,replace=T)
x5<- sample(scor$sta,size=5,replace=T)
MatirX <- matrix(c(x1,x2,x3,x4,x5),byrow=FALSE)
Matir.sample <- (n-1)*cov(MatirX)/n
ev <- eigen(Matir.sample)
evsum <-mean(ev$values)*5
lambda1 <- order(ev$values,decreasing=TRUE)[1]
theta.hat[k] <- lambda1/evsum
}
print(mean(theta.hat))
theta.jack <- numeric(n)
lambda.hat <- numeric(n)
for (j in 1:n)
{
for(i in 1:5)
{
lambda.hat[j] <- order(ev$values[-i],decreasing=TRUE)[1]
theta.jack[j] <- lambda.hat[j] / (mean(ev$values)*(4))
}
bias <- (n-1) * (mean(theta.jack) - theta.hat)
se <- sqrt((n-1) *mean((theta.jack - mean(theta.jack))^2))
}
print(c(mean(bias),mean(se)))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
.Last.error.trace
devtools::check()
n <- 1000
x1 <- runif(n,-1,1)
x2 <- runif(n,-1,1)
x3 <- runif(n,-1,1)
y <- seq(-1,1,0.01)
z <- 3/4*(1-y^2)
unif <- rep(0, n)
for(i in 1:n)
{
if(abs(x3[i])>=abs(x2[i]) && abs(x3[i])>=abs(x1[i]))
{x <- x2[i]
unif[i] <- x}
else
{x <- x3[i]
unif[i] <-x}
}
hist(unif,prob=TRUE,breaks=50)
lines(y,z,col="red")
devtools::build()
devtools::build()
devtools::build()
.Last.error
library(StatComp20027)
detach("package:stats", unload = TRUE)
library(StatComp)
remove.packages("StatComp")
remove.packages("StatComp20027")
devtools::build()
devtools::install_github("zhanghfd/statcomp", build_vignettes = TRUE,force=T)
update.packages("rmarkdown")
update.packages(rmarkdown)
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
devtools::check()
devtools::document
devtools::check()
devtools::install_github("abbottwang/StatComp20027")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(Statcomp20035)
devtools::build()
devtools::build()
library(Statcomp20035)
devtools::check()
# Count Five test
count5test = function(x, y) {
X = x - mean(x)
Y = y - mean(y)
outx = sum(X > max(Y)) + sum(X < min(Y))
outy = sum(Y > max(X)) + sum(Y < min(X))
# return 1 (reject) or 0 (do not reject H0)
return(as.integer(max(c(outx, outy)) > 5))
}
# Count Five test permutation
count5test_permutation = function(z)
{
n = length(z)
x = z[1:(n/2)]
y = z[-(1:(n/2))]
X = x - mean(x)
Y = y - mean(y)
outx = sum(X > max(Y)) + sum(X < min(Y))
outy = sum(Y > max(X)) + sum(Y < min(X))
return(as.integer(max(c(outx, outy)) > 5))
}
permutation = function(z,R)
{
n = length(z)
out = numeric(R)
for (r in 1: R)
{
p = sample(1:n ,n ,replace = FALSE)
out[r] = count5test_permutation(z[p])
}
sum(out)/R
}
n1 = 20
n2 = 50
mu1 = mu2 = 0
sigma1 = sigma2 = 1
m = 1e3
alphahat1 = mean(replicate(m, expr={
x = rnorm(n1, mu1, sigma1)
y = rnorm(n2, mu2, sigma2)
x = x - mean(x) #centered by sample mean
y = y - mean(y)
count5test(x, y)
}))
alphahat2 = mean(replicate(m, expr={
x = rnorm(n1, mu1, sigma1)
y = rnorm(n2, mu2, sigma2)
x = x - mean(x) #centered by sample mean
y = y - mean(y)
z = c(x,y)
permutation(z,1000)
})<0.05)
round(c(count5test=alphahat1,count5test_permutation=alphahat2),4)
remove.packages("Statcomp20035")
remove.packages("StatComp20027")
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check()
source('C:/r_file/321.R', encoding = 'UTF-8')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
source('C:/r_file/321.R')
devtools::document()
rm(list = c("f", "rwMetropolis"))
devtools::document()
devtools::check()
devtools::build()
install.packages("C:/r_file/workspace/Statcomp20035_1.0.tar.gz",repo=NULL)
C:/r_file/workspace/Statcomp20035_1.0.tar.gz
install.packages("C:/r_file/workspace/Statcomp20035_1.0.tar.gz",repo=NULL)
